All About AWS Tags

Sometimes it can be really hard to track down who is using the correct tags on AWS, especially when you have many people launching instances in different regions across the United States.

So, what strategy could you use to solve a problem of this kind?

Before we delve into this problem, let's understand why tagging is so important.

Here is a list of reasons. Please don't skip this part. 

1. Tags can help you track cost
2. Tags can help you track AWS resource usage
3. Tags can help you find your own AWS resource easily
4. Tags can help you find whoever isn't tagging their resources

How to track cost by using tags.

There are two ways to track cost.

Cost Explorer

In AWS Services Billing, you can find Cost Explorer, which shows you month-date spendings and daily spendings. On the left side of Cost Explorer, you have the option of selecting which tags to filter, for example, Name: Sally. On top of the graph, you can even group the costs and usage by tag key.
This is very convenient because you can see how much is spent by each user.

Since each user could be running more than one instance at a time, we want the users to tag their resources with these tag keys.

Name
Project
End_date

**The End_date is the end date of the project.

Another way to track cost by using tags is to read the csv file that is saved twice a day to the S3 bucket named AccountNumber-dlt-utilization. 
These files are zip files, so you will need to unzip them first. If you want to receive daily or weekly summaries of the costs, you can write some lambda code to parse the csv, add up the costs, and create an SNS mailing list to email all of the account users what the weekly spendings are. 
To do this, follow this link here.
Before we get into some lambda code, let's first understand something even more important.

After reading about cost tracking, you might ask what if the users forget to tag their resources?

Autagging 

A way to solve this problem is Autotagging.

The autotagging solution we'll be using today is summarized below.

When a resource is created, an API call is made and recorded by CloudWatch. Then, a CloudWatch event rule triggers a lambda function providing it with event details.
The lambda function extracts every resource ID and the user's identity and applies two tags, Owner and PrincipalId (current userâ€™s aws:userid value), to the created resource.

A simpler one sentence summary:

When EC2 Instances, Amazon Elastic Block Store (EBS) volumes, EBS snapshots or Amazon Machine Images (AMIs) are created, cloudwatch invokes the autotag lambda function.

Follow the steps below to autotag your EC2 Instance, Amazon Elastic Block Store (EBS) volumes, EBS snapshots and Amazon Machine Images (AMIs).

1. Deploy the cloudformation template in the region of your choosing to create an Autotag stack. Copy and paste the following Amazon S3 template URL.
https://s3.amazonaws.com/awsiammedia/public/sample/autotagec2resources/AutoTag.template

Note: Make sure CloudTrail is enabled in this region because cloudwatch events will not work if it is not turned on.

2. When the autotag stack is created, you will see CREATE_COMPLETE in the status.
Now you can assign IAM users to the created IAM group ManageEC2InstancesGroup under Resources as shown in the screenshot.

Note: You must add IAM users to the group manually. Also, if the added IAM user tries to stop an instance that someone else created, he or she will get an error message.

Next step: Auototag RDS instances and Get automatic SNS email alerts whenever an improperly tagged resource is detected

When the autotagging template is deployed in cloudformation, a cloudwatch events rule is created. If you now go to cloudwatch and click
on rules under events, you will see New-EC2Resource-Event. Open it and you will see the event pattern, which has four event names:
"CreateVolume", "RunInstances", "CreateImage", and "CreateSnapshot".

If we want to autotag rds instances and clusters, we would need to... Yes, you guessed it. We would need to create an event rule for rds.

Here are the steps:

1. Go to Rules Under Events in CloudWatch. Click on 'Create Rule'.
2. Choose RDS for service name and AWS API Call via CloudTrail for event type.
3. Select Specific operation(s) and then click on the plus button.
4. Add CreateDBCluster and CreateDBInstance.
5. On the right-hand side, click on add target.
6. Select Lambda Function and choose AutoTag-CFAutoTag-XXXXXXX (the name of the autotag lambda function created by the template).
7. Select Alias and then PROD.
8. Click on Configure details. 

Now that we have created the CloudWatch Events Rule, what do we do next?

1. Edit the Lambda code





Here is an article about autotagging written by an AWS blogger. https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/
